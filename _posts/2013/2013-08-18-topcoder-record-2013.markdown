---
layout: post
title: 2013年TopCoder竞赛笔记
date: 2013-08-18 17:11:59
categories:
- 技术流/techgangster 
tags:
- TopCoder
- Programming
- algorithm
- SRM
---
讀書的時候，在NIT埋頭搞了一年多的ACM，後面轉學了，到ZJUT的時候又稍微玩了個把月拿了個校一等獎就去實習了，後面的兩年就沒再接觸過編程競賽了。今年搬家和新室友住一起，其中一個是ACMer，參加過WorldFinal，工作之後還有在堅持玩競賽。所以我這把年紀才開始玩TopCoder就是由他帶起的。

讀書的時候也有聽說TopCoder，並且伴着許多傳說，比如“XXX在上面贏了XX萬美刀的獎金”，“XXX憑着TopCoder的成績拿了多少多少萬年薪”之類的。當然，每個行業都有這樣的天才人物。我這種小脆皮根本和這樣的傳說搭不上邊，當然沒有啥好說的。但既然上了這條賊船，讓自己變的更強大也是理所應當的。這樣也表明自己弱雖弱，但有一顆上進的心嘛。並且做做編程算法是肯定有好處的，因爲編程本身就是另外一種思考方式。

TopCoder的賽制啊判分標準之類的我還不熟，待以後玩利落了再來八一八。現在一個月2-3次的比賽，一场2小时左右(SRM,Single Round Match)，頻率和时间還是很适合大部分工作了的程序员的。我現在還在Division 2，也就是菜鳥的範疇中，努力升級至Div1中> <

我在Topcoder上寫過的代碼都會託管在github上，[點擊這](https://github.com/deanbear/TopCoder)。並且在這篇文章會定期更新代碼思路。

Get fun from programming. May the force be with you.

***


###SRM592 2013/09/27

2013/10/14 update

中規中矩的做了兩道題，分數漲了50pts左右，到1000pts出頭了。本次的Div2排名卻還不如SRM591，只排在Div2的180左右。

- LittleElephantAndBooks

  排序，拿出最小的前n-1以及第n+1個。

- LittleElephantAndPermutationDiv2

  如果沒做SRM591，我可能這題也是做不出來的。因爲有了591 Div2的500pts的題目ConvertibleStrings做鋪墊，這題更簡單，蠻好想到的。
  
  題意是讓你找出所有Magic和大於給定K的組合。固定一個數列A，讓另外一個數列B做next_permutation。這樣可以拿到A的一個固定排列對應的所有組合答案，所以還要對A做一次全排列才能拿到所有排列，所以答案還得乘以N!，N爲A數列的個數。

- LittleElephantAndArray

  這題最關鍵的一個地方，如果能從O(n^3 )降到O(n^2 )那麼就可以通過，否則就是Time Limit Exceeded。其实TopCoder在设置2s超时这件事情上还是下手很轻的。
  
  題意是給定N個連續Long Long型數字，每個數字可以對數位做縮減，但是最少要留下一位。問能組成多少組非降序數列。
  
  第一步是把每個數字做一次所有情況的縮減，所有數字的組合數(不排除組合出來的是相同的數字)應該是2^n ，n爲這個數字的位數。我用Map來記錄的，Key縮減出來的數字，Value爲共有多少個這個數字。再做一次升序排序，方便下一步處理。
  
  第二步就是把完成的所有組合開始拼數列。這裏面就是涉及到一個很厲害的把O(n^2 )降到O(C*n)的技巧(與上面說的有出入因爲外面還套了個大循環不算，屬於編程技巧)。
  
  比如你有两组数字组合，A(1,2,12)，B(2,3,23)，为了做出非降序数列，最简单的是对每个B匹配所有A的可能，然后记录下。比如B(2)循环一遍A(1,2,12)，B(3)也是，B(23)也是。所以就会是3*3=9次的遍历。那巧妙一些，B(2)通吃A(1,2)，启动一个计数SUM=2，然B(2)对A(12)无能为力，换B(3)，B(3)情况与B(2)也是一样的，SUM=2，然后B(23)时，在SUM=2的基础上，吃了A(12)，则SUM=3。所以答案为2+2+3=7。巧妙之处就是A只要遍历一次就好了。所以遍历降到1\*2+1\*1+1\*1=4。

[看SRM592的代碼點擊我](https://github.com/deanbear/TopCoder/tree/master/SRM/SRM592)

###SRM591 2013/09/17

2013/10/06 update

這場比賽蠻搞笑的，我雖然只做了250pts的題目，但是在500pts上我Challenge了3題，2 Success 1 Fail，多賺了75pts共計290+排名Div2的127名，分數也漲到900+，僥倖從灰色變爲綠色了。我只能說從別人的代碼裏找漏洞的感覺太爽了。

- TheArithmeticProgression

  題目簡單，只是很繞，就是說如何使得a+c=2b能順利相等，要麼a+c+x? =2b，要麼a+c=2(b+y?)，選擇x?還是y?，則根據min(|x?|,|y?|)來決定。

- ConvertibleStrings

  這道題目在比賽時沒做出來，也忘記了C++中還有很好用的字典排序函數next_permutation。覺得很多人肯定會往簡單的想，直接用貪心水過，當時想了個特殊情況，自己沒做出來也不能讓別人好過呀。然後在Challenge階段直接用這個數據幹掉了2個，當時那個爽。然後就很賤的想直接憑藉這個數據多幹掉幾個人，然後看都不看他們的代碼，直接Challenge...然後就失敗了，不敢再亂來了赫赫。
  
  題目意思是說兩個字符串A，B。A，B互相映射，約束就是B中的字母與A中的字母必須一一對應，不能出現一對多的關係以及多對多的關係。問題是給定兩個字符串，計算出需要的最小改動數，使得A，B互相映射。
  
  我的做法就是將A中涉及的字母全部統計出來(vOrder記錄)，以及記錄它們的總數(tot[])並且把A中字母對應到B的映射字母也做一個關聯記錄(record[][]記錄)。對vOrder做全排列(next_permutation)，然後記錄每次全排列時按照此次排列順序獲得的改動數，所有排列遍歷完後，即可得出最小排列數。
  
  因爲題目字母種類少(才10種，A-I)，所以可以大膽放心的使用全排列。如果n=100, O(n!)可是需要10^142 年才能完成全排列…

- YetAnotherTwoTeamsProblem

  我發現Div2真的超愛用DP類型作爲難題，想錯了就瞎，想對了編碼不要太快太短。
  
  題意是給你n個小夥伴，讓你組成A，B兩隊，每個小夥伴的強弱不同，約束條件爲SumSkills(A) > SumSkills(B) and SumSkills(A) - MostWeakGuyInA < SumSkills(B) + MostWeakGuyInA。
  
  開一個小夥伴Skill總和大小的數組dp[]，並將dp[0] = 1。將小夥伴Skills數組降序排列，Skill從最大開始遍歷，dp則從Skill總數開始往下走，dp[j] += dp[j-Skill[i]]，即可獲得所有的分組組合情況。再用上述兩個約束篩選出符合條件的組合，累加即可獲得答案。DP就是如此妙不可言，以空間換取時間。
  
[看SRM591的代碼點擊我](https://github.com/deanbear/TopCoder/tree/master/SRM/SRM591)


###SRM590 2013/09/07

2013/09/15 update

這場比賽過了兩題，分數漲了150+。500分的題目因爲不自信多交了一次，損失了一些分數。所以本來等級顏色有望變綠的。1000分的題目因爲最近工作太忙，所以拖到這個週末才做出來。及時更新一下，SRM591又要開始了。

- FoxAndGomoku

  五子棋，橫着，豎着，左斜和右斜，4種判斷一遍就好了。
  
- FoxAndGo

  又是地圖搜索類的題目。類似圍棋，問你再多下一顆子的情況下，如何圍殺最多的對方棋子。我用dfs查出來所有的能用一個棋子圍殺的對方棋子堆，記錄下來能圍殺的數量以及落子的位置，因爲可能同一顆落子會圍殺很多塊不同堆。最後合併同一顆落子圍殺的數量，取出最優解。
  
  過程中注意，每次dfs落子的時候，也要標記落子的位置，這樣就不會重複計算這顆落子了。還好Sample 4就是說這個點，不然我的System Test就挂了。

- FoxAndShogi

  這題在一週以後終於被我做出來了。卒和兵，上下移動，問有多少種。注意有可能是多個卒和多個兵。並且數據會很大，要取模。
  
  剛開始的時候是想着排列組合的。但是因爲情況太複雜了，每個卒和兵的位置以及布點都會互相影響。所以最後還是有了dp。dp[i][N]代表第i个士兵在N个点能活动的范围。然后第i个士兵和第i-1个士兵组成的组合可以很自然的变成dp[i][N] = SUM(dp[i-1][1...N-1])这样就可以有个方程式，前k个士兵的组合数量就是SUM(dp[k][1...N-1])就可以算出答案了。注意的是大数取模，要在每一次四则运算中带入，并且在能用加法的时候就不要用乘法了，因为两个大数相乘的时候还是很容易越界溢出来不及取模的。
  
[看SRM590的代碼點擊我](https://github.com/deanbear/TopCoder/tree/master/SRM/SRM590)


###SRM589 2013/08/27

2013/09/05 update

因爲是晚上七點鐘比賽，我以爲吃個飯回來再註冊還來得及，結果就錯過了。然後我就補做了一下。

- GooseTattarrattatDiv2:

  手快分高。

- GearsDiv2:

  這題剛開始我也是想用dp的。但是數據範圍很小，我就沒有再想下去了。解決方案就是模擬它，但注意模擬時要分別以每個齒輪作爲起點遍歷一遍，因爲它是個環，並且排練先後會影響到策略。

- FlippingBitsDiv2:

  這道題目真的很帥。因爲是說如何按照規則在最小次數的情況下把二進制串變成純1的，我剛開始是想着搜索，並且還很正常的想了兩個減枝策略：1.超過當前最小答案的次數就不要繼續搜索下去。2.記錄搜索過的二進制串以及到達這個二進制串所需要的次數，如果再次出現這個二進制串並且次數大於記錄的，也不用繼續搜索下去。理論貌似是正確的。但是2500的長度，不減枝的搜索空間是2^2500 好嗎操。並且我還真的興致勃勃的寫了一把，結果在用set<T>裝搜索過的10位二進制串的時候，已經爆了居然。XCode不是很會用也不知道是哪裏被操到了。
  
  然後我就琢磨着用dp做了。真是萬能的dp，爲啥都圍繞着dp出題呢。我想了兩天也沒想到完美的解決辦法。然後就Google了。然後就看了一些神經兮兮的解法。歸納如下:
  
  a).因爲有M做誒因素的左右兩頭反轉，所以可以把一個串以M爲倍數做切割，所以可以得到一個k = SIZE/M，然後times[1]，times[2]直到times[k]這樣。因爲上面的分組對一個個翻的模式沒有影響，所以就可以同時組合這兩類操作了。
  
  b).那麼翻的策略是如何呢？其實可以總結爲兩種，I要麼就是一個個將0全部翻爲1。II要麼就是將1全部範圍0後，再用個大反轉，將全0翻爲全1。其他的組合策略一定弱於這兩種，所以只要關心這兩種操作就可以了。
  
  c).當在非times[1]和times[k]對2~(k-1)組反轉的時候，因爲是處於中部的，要考慮前面的times，因爲前面的times相當於都是局部的全1，所以在做這段times的時候，要麼就是把這段裏的0全部轉爲1。要麼就是將這段的1變化爲0，然後對前面的times做全1反轉爲0的操作，再把這兩端一起做全0轉化爲1的操作。也就是times[k]中1的數量(需要反轉爲0),再加兩次全反轉動作。
  
  d).當是times[1]或者times[k]時，因爲一個沒前，一個有後(就是可以從後做全翻的動作)，所以1變0後，再做一次全反轉就可以了。
  
  e).要注意的是我說的times[X]是由2段組成的，而這兩端不一定就是times[X-1]與times[X]，而是由前面所有的段的組合。怎麼描述呢真頭痛。比如說是可以分成4段。那麼times[3] = times[1] + (M+1到3M串)的情況，或者也可能是times[2] + (當前2M+1到3M)的串的情況。兩個M括弧就是我代碼裏的cumul數組相關的表達式。
  
  真是太難表達了。還是看代碼吧。裏面那段我寫的非常蹩腳英文說明以及錯誤很多但意思到了的分段函數好好看一下就會好理解一點了。本來想用中文平易近人的解釋一下方案的，結果發現怎麼表達都不如寫程序來的順暢啊誒。

[看SRM589的代碼點擊我](https://github.com/deanbear/TopCoder/tree/master/SRM/SRM589)

###SRM588 2013/08/12

房間裏只有壹人解出兩題。我只做出壹題。略難，加上手太生不夠麻利。卡在第二題，對我來說第三題其實更容易得手。

- KeyDungeonDiv2: 
  
  送分题，在此不表。
- GUMIAndSongsDiv2:

   這道題目有點意思，壹直想著用背包(DP)，但是由于前後選擇有依賴，相當于是有狀態的，所以不知如何下手。比賽結束後嘗試用dfs搜索的辦法，把所有的狀態枚舉搜索了壹遍，答案是正確的，但是過不了系統測試，超時了。本想剪枝優化壹下，但是除了歌的長度(duration)還有歌曲音調(tone)變化限制，剪枝未遂。後面看了壹些建議：從songs中，取出兩首的tone作爲上下限(上下限界定完，這樣在這個界限中的切歌最優耗費壹定是MaxTone-MinTone)，再篩選出所有符合這個上下限的歌按duration從小到大排序(貪心在這裏是ok的，因爲在規定時間內，歌曲越多越好)，算出給定時間在這個tone界限中能放的歌曲，最後對比所有組合，取最大。時間複雜度爲O(n^3)。
   
   PS: 比賽時我在的房間只有壹個人最後成功了，而且還是暴力破解，枚舉所有情況的。在進行系統測試時，壹個來自天朝的少年nickname爲"China_xijingping"的還在叫囂說"Brute force is cheating , it can not pass"之類的話，然後那個人就華麗麗麗的pass了…當時我覺得丟人丟到國外的感覺。

- GameInDarknessDiv2:

  這道題其實也比較容易，用bfs或者dfs可以輕松搞定。只要明白Alice的下壹步以及Alice當前壹步，都需要考慮，這樣Bob才不會跟Alice撞到壹起。先把Alice的移動全部標記到壹個狀態數組[step][y][x]，後續Bob每次進行dfs的時候，就可以對比Alice狀態數組，同時記錄Bob自己的狀態數組[step][y][x]，把第n步移動到[yn][xn]的位置都標記上，以免反複的進行dfs。最後只要Bob能堅挺的完成所有step，那麽Bob就贏了。
  
  這題目就是寫起來比較麻煩。手慢則來不及了。

[看代碼點擊我](https://github.com/deanbear/TopCoder/tree/master/SRM/SRM588)

###SRM587 2013/08/01

這場比賽也很慘，本來可以命中三題的，但是第二題用dp沒過系統測試，第三題寫好來不及提交時間就到了。不開心。> <

- InsertZ : 這題考驗智力水平是不是適合當程序員。
- JumpFurther :

  這題我當時想用dp做，還華麗的寫出了個狀態轉移方程。但是系統測試證明我是錯的。其實是一個數學公式。能達到的總數是一定的，只要某段求和爲badstep，則可以總數減一繞過去。否則返回總數。我討厭數學，真的。

- ThreeColorabilityEasy :

  也是數學題，只要4個組合成的矩形構成不是3:1的情況就Yes，否則爲No。
  
[看代碼點擊我](https://github.com/deanbear/TopCoder/tree/master/SRM/SRM587)
   
   

